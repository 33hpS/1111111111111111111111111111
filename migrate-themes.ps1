# PowerShell —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º WASSER PRO
# –ó–∞–ø—É—Å–∫: .\migrate-themes.ps1

param(
    [switch]$Force = $false
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
function Write-Info { 
    param($Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue 
}

function Write-Success { 
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green 
}

function Write-Warning { 
    param($Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow 
}

function Write-Error { 
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red 
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
Write-Host ""
Write-Host "üé® WASSER PRO - –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if (-Not (Test-Path "package.json")) {
    Write-Error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –µ—Å—Ç—å package.json)"
    Write-Host "   –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $PWD" -ForegroundColor Gray
    Write-Host "   –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: .\migrate-themes.ps1" -ForegroundColor Gray
    exit 1
}

if (-Not (Test-Path "src")) {
    Write-Error "–ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
}

Write-Info "üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $PWD"
Write-Success "‚úÖ –ù–∞–π–¥–µ–Ω package.json"
Write-Host ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
Write-Info "üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:"
Write-Host "   ‚Ä¢ –°–æ–∑–¥–∞—Å—Ç backup —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç–µ–º" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–µ–º" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç CSS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç React —Ö—É–∫ useTheme()" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ThemeSwitcher" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –£–¥–∞–ª–∏—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Ç–µ–º" -ForegroundColor Gray
Write-Host ""

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
if (-Not $Force) {
    $response = Read-Host "ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N)"
    if ($response -ne "y" -and $response -ne "Y") {
        Write-Error "–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    }
}

Write-Host ""
Write-Info "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é..."
Write-Host ""

try {
    # –°–æ–∑–¥–∞–µ–º backup –ø–∞–ø–∫—É
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupDir = "theme-migration-backup-$timestamp"
    
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    Write-Info "üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ backup: $backupDir"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è backup —Ñ–∞–π–ª–∞
    function Backup-File {
        param($FilePath)
        if (Test-Path $FilePath) {
            $fileName = Split-Path $FilePath -Leaf
            Copy-Item $FilePath "$backupDir\$fileName" -Force
            Write-Success "Backup: $FilePath"
        }
    }

    # –°–æ–∑–¥–∞–µ–º backup —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    Write-Info "üíæ –°–æ–∑–¥–∞–µ–º backup..."
    Backup-File "src\theme.ts"
    Backup-File "src\themeAccent.ts"
    Backup-File "src\shadcn.css"
    Backup-File "src\App.tsx"

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    Write-Info "üìÅ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫..."
    @("src\theme", "src\hooks", "src\components\theme") | ForEach-Object {
        New-Item -ItemType Directory -Path $_ -Force | Out-Null
    }

    # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π theme manager
    Write-Info "üé® –°–æ–∑–¥–∞–µ–º theme manager..."
    
    $themeManagerContent = @'
/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–º WASSER PRO
 */

export type ThemeMode = 'light' | 'dark' | 'system'
export type AccentColor = 'blue' | 'emerald' | 'violet' | 'amber' | 'rose'

interface ThemeConfig {
  mode: ThemeMode
  accent: AccentColor
}

const STORAGE_KEYS = {
  mode: 'app_theme',
  accent: 'app_accent'
} as const

const ACCENT_PALETTES: Record<AccentColor, Record<string, string>> = {
  blue: {
    50: '#eff6ff', 100: '#dbeafe', 200: '#bfdbfe', 300: '#93c5fd',
    400: '#60a5fa', 500: '#3b82f6', 600: '#2563eb', 700: '#1d4ed8',
    800: '#1e40af', 900: '#1e3a8a'
  },
  emerald: {
    50: '#ecfdf5', 100: '#d1fae5', 200: '#a7f3d0', 300: '#6ee7b7',
    400: '#34d399', 500: '#10b981', 600: '#059669', 700: '#047857',
    800: '#065f46', 900: '#064e3b'
  },
  violet: {
    50: '#faf5ff', 100: '#f3e8ff', 200: '#e9d5ff', 300: '#d8b4fe',
    400: '#c084fc', 500: '#a855f7', 600: '#9333ea', 700: '#7e22ce',
    800: '#6b21a8', 900: '#581c87'
  },
  amber: {
    50: '#fffbeb', 100: '#fef3c7', 200: '#fde68a', 300: '#fcd34d',
    400: '#fbbf24', 500: '#f59e0b', 600: '#d97706', 700: '#b45309',
    800: '#92400e', 900: '#78350f'
  },
  rose: {
    50: '#fff1f2', 100: '#ffe4e6', 200: '#fecdd3', 300: '#fda4af',
    400: '#fb7185', 500: '#f43f5e', 600: '#e11d48', 700: '#be185d',
    800: '#9f1239', 900: '#881337'
  }
}

class ThemeManager {
  private config: ThemeConfig = { mode: 'system', accent: 'blue' }
  private mediaQuery: MediaQueryList | null = null
  private listeners = new Set<(config: ThemeConfig) => void>()

  constructor() {
    this.loadFromStorage()
    this.setupMediaQuery()
    this.applyTheme()
  }

  private loadFromStorage(): void {
    try {
      const savedMode = localStorage.getItem(STORAGE_KEYS.mode) as ThemeMode | null
      const savedAccent = localStorage.getItem(STORAGE_KEYS.accent) as AccentColor | null
      
      this.config = {
        mode: this.isValidMode(savedMode) ? savedMode : 'system',
        accent: this.isValidAccent(savedAccent) ? savedAccent : 'blue'
      }
    } catch {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º defaults
    }
  }

  private saveToStorage(): void {
    try {
      localStorage.setItem(STORAGE_KEYS.mode, this.config.mode)
      localStorage.setItem(STORAGE_KEYS.accent, this.config.accent)
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }

  private isValidMode(mode: any): mode is ThemeMode {
    return ['light', 'dark', 'system'].includes(mode)
  }

  private isValidAccent(accent: any): accent is AccentColor {
    return accent && accent in ACCENT_PALETTES
  }

  private setupMediaQuery(): void {
    if (typeof window === 'undefined') return
    
    try {
      this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')
      this.mediaQuery.addEventListener('change', () => {
        if (this.config.mode === 'system') {
          this.applyTheme()
          this.notifyListeners()
        }
      })
    } catch {
      // –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    }
  }

  private applyTheme(): void {
    const root = document.documentElement
    
    // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º light/dark –∫–ª–∞—Å—Å
    const isDark = this.config.mode === 'dark' || 
      (this.config.mode === 'system' && this.mediaQuery?.matches)
    root.classList.toggle('dark', isDark)
    
    // 2. –ò–Ω–∂–µ–∫—Ç–∏–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
    this.injectAccentStyles()
    
    // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π –∫–ª–∞—Å—Å
    this.applyAccentClass()
  }

  private injectAccentStyles(): void {
    const styleId = 'theme-accent-vars'
    let style = document.getElementById(styleId) as HTMLStyleElement
    
    if (!style) {
      style = document.createElement('style')
      style.id = styleId
      document.head.appendChild(style)
    }

    const palette = ACCENT_PALETTES[this.config.accent]
    const cssVars = Object.entries(palette)
      .map(([shade, color]) => `  --accent-${shade}: ${color};`)
      .join('\n')

    style.textContent = `
:root {
${cssVars}
  --primary: var(--accent-600);
  --primary-foreground: white;
}

.dark {
  --primary: var(--accent-500);
  --primary-foreground: black;
}
`
  }

  private applyAccentClass(): void {
    const root = document.documentElement
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ accent-* –∫–ª–∞—Å—Å—ã
    Array.from(root.classList)
      .filter(cls => cls.startsWith('accent-'))
      .forEach(cls => root.classList.remove(cls))
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
    root.classList.add(`accent-${this.config.accent}`)
  }

  private notifyListeners(): void {
    this.listeners.forEach(fn => fn(this.config))
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  setMode(mode: ThemeMode): void {
    this.config.mode = mode
    this.saveToStorage()
    this.applyTheme()
    this.notifyListeners()
  }

  setAccent(accent: AccentColor): void {
    this.config.accent = accent
    this.saveToStorage()
    this.applyTheme()
    this.notifyListeners()
  }

  getConfig(): ThemeConfig {
    return { ...this.config }
  }

  getAvailableAccents(): Array<{ key: AccentColor; label: string }> {
    return [
      { key: 'blue', label: '–°–∏–Ω–∏–π' },
      { key: 'emerald', label: '–ò–∑—É–º—Ä—É–¥–Ω—ã–π' },
      { key: 'violet', label: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π' },
      { key: 'amber', label: '–Ø–Ω—Ç–∞—Ä–Ω—ã–π' },
      { key: 'rose', label: '–†–æ–∑–æ–≤—ã–π' }
    ]
  }

  subscribe(listener: (config: ThemeConfig) => void): () => void {
    this.listeners.add(listener)
    return () => this.listeners.delete(listener)
  }

  destroy(): void {
    if (this.mediaQuery) {
      this.mediaQuery.removeEventListener('change', this.applyTheme)
    }
    this.listeners.clear()
  }
}

// Singleton instance
export const themeManager = new ThemeManager()

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
export const setTheme = (mode: ThemeMode) => themeManager.setMode(mode)
export const getTheme = () => themeManager.getConfig().mode
export const setAccent = (accent: AccentColor) => themeManager.setAccent(accent)
export const getAccent = () => themeManager.getConfig().accent
'@

    $themeManagerContent | Out-File -FilePath "src\theme\index.ts" -Encoding UTF8

    # 2. –°–æ–∑–¥–∞–µ–º React —Ö—É–∫
    Write-Info "ü™ù –°–æ–∑–¥–∞–µ–º React —Ö—É–∫ useTheme..."
    
    $useThemeContent = @'
import { useEffect, useState } from 'react'
import { themeManager, type ThemeMode, type AccentColor } from '../theme'

interface ThemeHookReturn {
  mode: ThemeMode
  accent: AccentColor
  isDark: boolean
  setMode: (mode: ThemeMode) => void
  setAccent: (accent: AccentColor) => void
  availableAccents: Array<{ key: AccentColor; label: string }>
  toggleMode: () => void
}

export function useTheme(): ThemeHookReturn {
  const [config, setConfig] = useState(() => themeManager.getConfig())

  useEffect(() => {
    const unsubscribe = themeManager.subscribe(setConfig)
    return unsubscribe
  }, [])

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç–µ–º–Ω–∞—è –ª–∏ —Ç–µ–º–∞ —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞
  const isDark = config.mode === 'dark' || 
    (config.mode === 'system' && 
     typeof window !== 'undefined' && 
     window.matchMedia?.('(prefers-color-scheme: dark)').matches)

  const toggleMode = () => {
    const nextMode: ThemeMode = config.mode === 'light' ? 'dark' : 'light'
    themeManager.setMode(nextMode)
  }

  return {
    mode: config.mode,
    accent: config.accent,
    isDark,
    setMode: themeManager.setMode.bind(themeManager),
    setAccent: themeManager.setAccent.bind(themeManager),
    availableAccents: themeManager.getAvailableAccents(),
    toggleMode
  }
}
'@

    $useThemeContent | Out-File -FilePath "src\hooks\useTheme.ts" -Encoding UTF8

    # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ThemeSwitcher
    Write-Info "üéõÔ∏è  –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ThemeSwitcher..."
    
    $themeSwitcherContent = @'
import React from 'react'
import { Moon, Sun, Monitor, Palette } from 'lucide-react'
import { useTheme } from '../../hooks/useTheme'
import type { ThemeMode, AccentColor } from '../../theme'

interface ThemeSwitcherProps {
  showAccents?: boolean
  orientation?: 'horizontal' | 'vertical'
  size?: 'sm' | 'md' | 'lg'
}

export function ThemeSwitcher({ 
  showAccents = true, 
  orientation = 'vertical',
  size = 'md' 
}: ThemeSwitcherProps) {
  const { mode, accent, setMode, setAccent, availableAccents } = useTheme()

  const modeOptions: Array<{ value: ThemeMode; icon: React.ReactNode; label: string }> = [
    { value: 'light', icon: <Sun size={16} />, label: '–°–≤–µ—Ç–ª–∞—è' },
    { value: 'dark', icon: <Moon size={16} />, label: '–¢–µ–º–Ω–∞—è' },
    { value: 'system', icon: <Monitor size={16} />, label: '–°–∏—Å—Ç–µ–º–Ω–∞—è' }
  ]

  const containerClass = orientation === 'horizontal' 
    ? 'flex items-center gap-2' 
    : 'space-y-3'

  const buttonSizes = {
    sm: 'px-2 py-1 text-xs',
    md: 'px-3 py-2 text-sm',
    lg: 'px-4 py-3 text-base'
  }

  return (
    <div className={containerClass}>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ */}
      <div className="space-y-2">
        <div className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300">
          <Monitor size={14} />
          –¢–µ–º–∞
        </div>
        <div className="flex rounded-lg border border-gray-200 dark:border-gray-700 p-1 bg-gray-50 dark:bg-gray-800">
          {modeOptions.map((option) => (
            <button
              key={option.value}
              onClick={() => setMode(option.value)}
              className={`
                ${buttonSizes[size]} flex-1 flex items-center justify-center gap-2 rounded-md transition-all
                ${mode === option.value 
                  ? 'bg-white dark:bg-gray-700 shadow-sm text-gray-900 dark:text-gray-100' 
                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100'
                }
              `}
              title={option.label}
            >
              {option.icon}
              {size === 'lg' && <span>{option.label}</span>}
            </button>
          ))}
        </div>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
      {showAccents && (
        <div className="space-y-2">
          <div className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300">
            <Palette size={14} />
            –ê–∫—Ü–µ–Ω—Ç
          </div>
          <div className="grid grid-cols-5 gap-1 p-1 rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
            {availableAccents.map((option) => (
              <button
                key={option.key}
                onClick={() => setAccent(option.key)}
                className={`
                  relative w-8 h-8 rounded-md transition-all hover:scale-110
                  ${accent === option.key 
                    ? 'ring-2 ring-offset-2 ring-gray-400 dark:ring-gray-300' 
                    : ''
                  }
                `}
                style={{
                  backgroundColor: getAccentColor(option.key)
                }}
                title={option.label}
              >
                {accent === option.key && (
                  <div className="absolute inset-0 rounded-md bg-white/20 dark:bg-black/20" />
                )}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}

function getAccentColor(accent: AccentColor): string {
  const colors = {
    blue: '#2563eb',
    emerald: '#10b981', 
    violet: '#9333ea',
    amber: '#f59e0b',
    rose: '#e11d48'
  }
  return colors[accent]
}

export function ThemeToggle() {
  const { mode, setMode } = useTheme()
  
  const nextMode: ThemeMode = mode === 'light' ? 'dark' : mode === 'dark' ? 'system' : 'light'
  const icons = {
    light: <Sun size={16} />,
    dark: <Moon size={16} />,
    system: <Monitor size={16} />
  }

  return (
    <button
      onClick={() => setMode(nextMode)}
      className="p-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
      title={`–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: ${mode}, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞: ${nextMode}`}
    >
      {icons[mode]}
    </button>
  )
}
'@

    $themeSwitcherContent | Out-File -FilePath "src\components\theme\ThemeSwitcher.tsx" -Encoding UTF8

    # 4. –û–±–Ω–æ–≤–ª—è–µ–º shadcn.css - –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ü–µ–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    Write-Info "üé® –û–±–Ω–æ–≤–ª—è–µ–º shadcn.css..."
    
    if (Test-Path "src\shadcn.css") {
        $existingCss = Get-Content "src\shadcn.css" -Raw
        
        $accentVars = @"
/* –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ */
:root {
  --accent-50: #eff6ff;
  --accent-100: #dbeafe;
  --accent-200: #bfdbfe;
  --accent-300: #93c5fd;
  --accent-400: #60a5fa;
  --accent-500: #3b82f6;
  --accent-600: #2563eb;
  --accent-700: #1d4ed8;
  --accent-800: #1e40af;
  --accent-900: #1e3a8a;
}

"@
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ü–µ–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ
        $newCss = $accentVars + $existingCss
        
        # –ó–∞–º–µ–Ω—è–µ–º --primary –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        $newCss = $newCss -replace '--primary: 0 0% 9%;', '--primary: var(--accent-600);'
        $newCss = $newCss -replace '--primary: 0 0% 98%;', '--primary: var(--accent-500);'
        
        $newCss | Out-File -FilePath "src\shadcn.css" -Encoding UTF8
    }

    # 5. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    Write-Info "üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Ç–µ–º..."
    
    if (Test-Path "src\themeAccent.ts") {
        Remove-Item "src\themeAccent.ts" -Force
        Write-Success "–£–¥–∞–ª–µ–Ω themeAccent.ts"
    }
    
    if (Test-Path "src\theme.ts") {
        Remove-Item "src\theme.ts" -Force
        Write-Success "–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π theme.ts"
    }

    # 6. –°–æ–∑–¥–∞–µ–º README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    Write-Info "üìö –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é..."
    
    $readmeContent = @'
# üé® –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

## ‚úÖ –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:

1. **–°–æ–∑–¥–∞–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–º** (`src/theme/index.ts`)
2. **–î–æ–±–∞–≤–ª–µ–Ω React —Ö—É–∫** (`src/hooks/useTheme.ts`)
3. **–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è** (`src/components/theme/ThemeSwitcher.tsx`)
4. **–û–±–Ω–æ–≤–ª–µ–Ω CSS** —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
5. **–£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã** (`themeAccent.ts`, —Å—Ç–∞—Ä—ã–π `theme.ts`)

## üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:

### –í React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö:
```typescript
import { useTheme } from '../hooks/useTheme'

function MyComponent() {
  const { mode, accent, setMode, setAccent, isDark } = useTheme()
  
  return (
    <button 
      onClick={() => setMode('dark')}
      style={{ backgroundColor: 'var(--accent-600)' }}
    >
      Switch to dark theme
    </button>
  )
}
```

### CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç–æ–≤:
```css
.my-button {
  background-color: var(--accent-500);
  border-color: var(--accent-300);
  color: var(--accent-900);
}
```

### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º:
```typescript
import { ThemeSwitcher } from '../components/theme/ThemeSwitcher'

<ThemeSwitcher showAccents={true} size="md" />
```

## üéØ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

- ‚úÖ 5 –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ (blue, emerald, violet, amber, rose)
- ‚úÖ –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–º–µ–Ω—ã —Ç–µ–º
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
- ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
- ‚úÖ TypeScript —Ç–∏–ø–∏–∑–∞—Ü–∏—è
- ‚úÖ React —Ö—É–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

## üìÅ Backup —Ñ–∞–π–ª—ã:

–°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ backup –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

## üîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ dev —Å–µ—Ä–≤–µ—Ä: `npm run dev`
2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è `useTheme()` —Ö—É–∫–∞
3. –ó–∞–º–µ–Ω–∏—Ç–µ hardcoded —Ü–≤–µ—Ç–∞ –Ω–∞ `var(--accent-*)` –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
'@

    $readmeContent | Out-File -FilePath "THEME_MIGRATION_README.md" -Encoding UTF8

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    Write-Host ""
    Write-Success "üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    Write-Host ""
    Write-Host "üìä –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏:" -ForegroundColor Blue
    Write-Host "  ‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π theme manager" -ForegroundColor Green
    Write-Host "  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω React —Ö—É–∫ useTheme" -ForegroundColor Green
    Write-Host "  ‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ThemeSwitcher" -ForegroundColor Green
    Write-Host "  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω shadcn.css —Å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏" -ForegroundColor Green
    Write-Host "  ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Ç–µ–º" -ForegroundColor Green
    Write-Host "  ‚úÖ –°–æ–∑–¥–∞–Ω backup –≤: $backupDir" -ForegroundColor Green
    Write-Host "  ‚úÖ –°–æ–∑–¥–∞–Ω README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor Yellow
    Write-Host "  1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ THEME_MIGRATION_README.md" -ForegroundColor Gray
    Write-Host "  2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useTheme() —Ö—É–∫–∞" -ForegroundColor Gray
    Write-Host "  3. –ó–∞–º–µ–Ω–∏—Ç–µ hardcoded —Ü–≤–µ—Ç–∞ –Ω–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ" -ForegroundColor Gray
    Write-Host "  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏" -ForegroundColor Gray
    Write-Host ""
    Write-Host "üöÄ –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ dev —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:" -ForegroundColor Green
    Write-Host "   npm run dev" -ForegroundColor Cyan
    Write-Host ""

} catch {
    Write-Error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: $($_.Exception.Message)"
    Write-Host "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ backup —Ñ–∞–π–ª—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ." -ForegroundColor Yellow
    exit 1
}